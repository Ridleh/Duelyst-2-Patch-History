@page "/cards"
@inject HttpClient Http

@using DuelystPatchNotes.Models
@using DuelystPatchNotes.Services
@using DuelystPatchNotes.Components

<div id="background" class="hero-content">
    <video id="background-video" loop autoplay="autoplay" muted poster="./Assets/Images/Backgrounds/Duelyst_Cards_Background.png">
        <source src="./Assets/Videos/tree_loop.mp4" type="video/mp4">
        <source src="./Assets/Videos/tree_loop.ogg" type="video/ogg">
        Your browser does not support the video tag.
    </video>
    <div class="section-inner">
        <div class="hero-content-text-wrapper">
            <h5 class="hero-content-title">DUELYST II</h5>
            @if(SelectedPatch != null)
            {
                <h3 class="hero-content-title">Patch @SelectedPatch.Version</h3>
            }
        </div>
    </div>
</div>

<div class="card-nav" style="display:none">
    <ul>
        <li>
            <a onclick="document.getElementById('faction-cards-grid').scrollIntoView({behavior:'smooth'})">Lyonar</a>
        </li>
        <li>
            <a onclick="document.getElementById('Songhai').scrollIntoView({behavior:'smooth'})">Songhai</a>
        </li>
        <li>
            <a onclick="document.getElementById('Vetruvian').scrollIntoView({behavior:'smooth'})">Vetruvian</a>
        </li>
        <li>
            <a onclick="document.getElementById('Abyssian').scrollIntoView({behavior:'smooth'})">Abyssian</a>
        </li>
        <li>
            <a onclick="document.getElementById('Magmar').scrollIntoView({behavior:'smooth'})">Magmar</a>
        </li>
        <li>
            <a onclick="document.getElementById('Vanar').scrollIntoView({behavior:'smooth'})">Vanar</a>
        </li>
        <li>
            <a onclick="document.getElementById('Neutral').scrollIntoView({behavior:'smooth'})">Neutral</a>
        </li>
    </ul>
</div>
<div class="cards">
    @if (SelectedCards != null)
    {
        CardData sampleCard = SelectedCards[0];
        <h1 id="faction-cards-grid" class="faction-header">
            <img src=@GetFactionIcon(sampleCard) />
            @GetFactionName(sampleCard)
        </h1>
        <div class="card-group">
            @foreach (var card in SelectedCards)
            {
                <CardView CardData=card/>
            }
        </div>
    }
    else
    {
        <img style="width: 300px; image-rendering: -moz-crisp-edges;" 
        src="./Assets/Gifs/Loading/Fog_run.gif"/>
        <h2 style="color: #ffffff;">Fetching Cards...</h2> 
    }
</div>



@code {

    [Parameter]
    public Patch SelectedPatch { get; set; }

    [Parameter]
    public Faction SelectedFaction { get; set; } = Faction.Lyonar;

    private List<CardData> FetchedCards;
    private List<CardData> SelectedCards;

    private List<CardData> LyonarCards;
    private List<CardData> SonghaiCards;
    private List<CardData> VetruvianCards;
    private List<CardData> AbyssianCards;
    private List<CardData> MagmarCards;
    private List<CardData> VanarCards;
    private List<CardData> NeutralCards;

    private List<string> SelectedCardTypes;
    private List<string> SelectedRarities;


    protected override async Task OnInitializedAsync()
    {
        SelectedCardTypes = new List<string>();
        SelectedRarities = new List<string>();

        await LoadPatchData();
    }

    public async Task ChangePatch(Patch patch)
    {
        SelectedPatch = patch;
        await LoadPatchData();
        StateHasChanged();
    }

    public void ChangeFaction(Faction faction)
    {
        SelectedFaction = faction;
        LoadGrid();
        StateHasChanged();
    }

    public void ToggleRarity(string rarity)
    {
        if (SelectedRarities.Contains(rarity))
        {
            SelectedRarities.Remove(rarity);
        }
        else
        {
            SelectedRarities.Add(rarity);
        }

        LoadGrid();
        StateHasChanged();
    }

    public void ToggleCardType(string cardType)
    {
        if (SelectedCardTypes.Contains(cardType))
        {
            SelectedCardTypes.Remove(cardType);
        }
        else
        {
            SelectedCardTypes.Add(cardType);
        }

        LoadGrid();
        StateHasChanged();
    }

    private async Task LoadPatchData()
    {
        if (SelectedPatch == null)
        {
            return;
        }

        string path;
        if (SelectedPatch.IsLatest)
        {
            path = "https://api.duelyst2.com/cards.json";
        }
        else
        {
            path = $"PatchData/{SelectedPatch.Version}.json";
        }

        FetchedCards = await Http.GetFromJsonAsync<List<CardData>>(path);

        LyonarCards = FetchedCards.Where(card => card.Faction == Faction.Lyonar).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        SonghaiCards = FetchedCards.Where(card => card.Faction == Faction.Songhai).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        VetruvianCards = FetchedCards.Where(card => card.Faction == Faction.Vetruvian).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        AbyssianCards = FetchedCards.Where(card => card.Faction == Faction.Abyssian).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        MagmarCards = FetchedCards.Where(card => card.Faction == Faction.Magmar).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        VanarCards = FetchedCards.Where(card => card.Faction == Faction.Vanar).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();
        NeutralCards = FetchedCards.Where(card => card.Faction == Faction.Neutral).OrderBy(e => e.CardType != "General").ThenBy(e => e.Mana).ThenBy(e => e.Name).ToList();

        LoadGrid();
    }

    protected void LoadGrid()
    {
        List<CardData> cards = SelectedFaction switch
        {
            Faction.Lyonar => LyonarCards,
            Faction.Songhai => SonghaiCards,
            Faction.Vetruvian => VetruvianCards,
            Faction.Abyssian => AbyssianCards,
            Faction.Magmar => MagmarCards,
            Faction.Vanar => VanarCards,
            Faction.Neutral => NeutralCards,
            _ => null
        };

        if(SelectedCardTypes.Count > 0)
        {
            cards = cards.Where(card => SelectedCardTypes.Contains(card.CardType)).ToList();
        }

        if (SelectedRarities.Count > 0)
        {
            cards = cards.Where(card => SelectedRarities.Contains(card.Rarity)).ToList();
        }

        SelectedCards = cards;
    }

    string GetFactionIcon(CardData sampleCard)
    {
        string basePath = "./Assets/Images/Crests/";
        return sampleCard.Faction switch
        {
            Faction.Lyonar => basePath + "lyonar_crest_2x.png",
            Faction.Songhai => basePath + "songhai_crest_2x.png",
            Faction.Vetruvian => basePath + "vetruvian_crest_2x.png",
            Faction.Abyssian => basePath + "abyssian_crest_2x.png",
            Faction.Magmar => basePath + "magmar_crest_2x.png",
            Faction.Vanar => basePath + "vanar_crest_2x.png",
            Faction.Neutral => basePath + "crest_neutral.png",
            _ => basePath + "lyonar_crest_2x.png"
        };
    }

    string GetFactionName(CardData sampleCard)
    {
        return sampleCard.Faction switch
        {
            Faction.Lyonar => "LYONAR KINGDOMS",
            Faction.Songhai => "SONGHAI EMPIRE",
            Faction.Vetruvian => "VETRUVIAN IMPERIUM",
            Faction.Abyssian => "ABYSSIAN HOST",
            Faction.Magmar => "MAGMAR ASPECTS",
            Faction.Vanar => "VANAR KINDRED",
            Faction.Neutral => "NEUTRAL",
            _ => ""
        };
    }
}
